// Based on: https://github.com/ghale/gradle-jenkins-plugin/wiki
// DSL help: https://github.com/jenkinsci/job-dsl-plugin/wiki/Job-DSL-Commands

apply plugin: 'jenkins'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.terrafolio:gradle-jenkins-plugin:1.1.0'
    }
}

jenkins {
    servers {
        testing {
            url 'http://localhost:8080'
            secure false
        }
    }

    defaultServer servers.testing

    templates {
        some_base {
            type 'maven'
            dsl {
                logRotator(20, 2)
                scm {
                    git 'https://github.com/afabian80/maven-simple.git'
                }
                triggers {
                    scm 'H/15 * * * *'
                }
                mavenOpts '-Xmx256M'
                publishers {
                    archiveArtifacts 'target/*.jar'
                }
            }
        }
    }

    jobs {

        // Sample job to extend a template. Also triggers a downstream job.
        compile_job_1 {
            type 'maven'
            dsl {
                using 'some_base'
                name 'generated-compile-job'
                description 'Sample Maven compile job created from Gradle.'
                goals 'clean package'
                publishers {
                    downstream 'generated-test-job', 'UNSTABLE'
                }
            }
        }

        // Sample job, extending a template.
        test_job_1 {
            type 'maven'
            dsl {
                using 'some_base'
                name 'generated-test-job'
                description 'Sample Maven test job created from Gradle.'
                goals 'clean package'
            }
        }

        // Sample job with a configure block. Overwriting 2 xml nodes.
        custom_job {
            type 'maven'
            dsl {
                name = 'customized-job'
                using 'some_base'
                configure { project ->
                    (project / 'disabled').setValue('false')
                    (project / 'description').setValue('This is a customized xml node')
                }
            }
        }

        // Sample job with a configure block. Appending a new node (matrix plugin).
        custom_job_2 {
            type 'maven'
            dsl {
                name = 'customized-job-2'
                using 'some_base'
                configure { project ->
                    def matrix = project / 'properties' / 'hudson.security.AuthorizationMatrixProperty'
                    matrix.appendNode('permission', 'hudson.model.Run.Delete:jryan')
                    matrix.appendNode('anything', [who: 'me', to_whom: 'to me'], 'wanted')
                }
            }
        }

        // Sample job putting together configure blocks with helper methods
        modular_role_job {
            type 'maven'
            dsl {
                configure JobHelper.logRotatorRole(15)
                configure JobHelper.mavenOptsRole()
            }
        }

        // Sample job putting together a 'dsl' block with helper methods for parent nodes (e.g. extending the scm node)
        modular_role_job_2 {
            type 'maven'
            dsl {
                name = 'modular_role_job_2'
                scm JobHelper.scmRole('http://svn-server.hu/svn/path') // hook in a parametrized scm section you want
            }
        }
    }
}

class JobHelper {
    static Closure logRotatorRole(days) {
        return { project ->
            // overwriting existing node (use 'project << logRotator' to append)
            project / 'logRotator' {
                daysToKeep(days)
                numToKeep(10)
                artifactDaysToKeep(-1)
                artifactNumToKeep(-1)
            }
        }
    }

    // Sample to extend the configure section
    static Closure mavenOptsRole() {
        return { project ->
            project.div('mavenOpts').setValue('-Xmx1024') // div() is equivalent to "/", e.g. project / 'mavenOpts'
        }
    }

    // Sample to extend the dsl section
    static Closure scmRole(url) {
        return {
            svn(url, 'working-dir') { svnNode ->
                svnNode / browser(class:'hudson.scm.browsers.FishEyeSVN') {
                rootModule 'my_root_module'
                }
            }
        }
    }
}